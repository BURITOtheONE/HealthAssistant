<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Meal Planner - Health Assistant</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="css/style.css">
    <!-- Bootstrap JavaScript library for interactive elements -->
    <script src="js/bootstrap.bundle.js"></script>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <!-- Lucide icons for consistent iconography -->
    <script src="https://unpkg.com/lucide@latest"></script>
</head>

<body class="bg-body">

    <!-- Include the existing navbar -->
    <%- include('partials/navbar') %>

    <div class="container mt-5">
        <div class="row">
            <div class="col-sm-12 text-center">
                <h1>Meal Planner</h1>
                <p class="text-muted">Plan your meals for the week</p>
            </div>
        </div>

        <div class="row mt-4">
            <div class="col-sm-12">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <h2 class="card-title text-center">Plan Your Meals</h2>
                        <div class="row mt-4">
                            <div class="col-sm-12">
                                <input type="date" id="meal-date" class="form-control mb-3">
                            </div>
                            <div class="col-sm-6 col-md-3 mb-3">
                                <div class="input-group">
                                    <input type="text" id="breakfast" class="form-control" placeholder="Breakfast">
                                    <button class="btn btn-avocado" type="button" onclick="saveMealPlan()"><i data-lucide="plus"></i> Add</button>
                                </div>
                            </div>
                            <div class="col-sm-6 col-md-3 mb-3">
                                <div class="input-group">
                                    <input type="text" id="lunch" class="form-control" placeholder="Lunch">
                                    <button class="btn btn-avocado" type="button" onclick="saveMealPlan()"><i data-lucide="plus"></i> Add</button>
                                </div>
                            </div>
                            <div class="col-sm-6 col-md-3 mb-3">
                                <div class="input-group">
                                    <input type="text" id="dinner" class="form-control" placeholder="Dinner">
                                    <button class="btn btn-avocado" type="button" onclick="saveMealPlan()"><i data-lucide="plus"></i> Add</button>
                                </div>
                            </div>
                            <div class="col-sm-6 col-md-3 mb-3">
                                <div class="input-group">
                                    <input type="text" id="snacks" class="form-control" placeholder="Snacks">
                                    <button class="btn btn-avocado" type="button" onclick="saveMealPlan()"><i data-lucide="plus"></i> Add</button>
                                </div>
                            </div>
                        </div>
                        <div class="row mt-4">
                            <div class="col-sm-12">
                                <h4>Planned Meals</h4>
                                <ul id="planned-meals" class="list-group">
                                    <!-- Planned meals will be dynamically added here -->
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Recipe Modal -->
    <div class="modal fade" id="recipe-modal" tabindex="-1" role="dialog" aria-labelledby="recipeModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="recipe-modal-title"></h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div id="recipe-loading" class="text-center">
                        <div class="spinner-border text-success" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>
                        <p>Loading recipe details...</p>
                    </div>
                    <div id="recipe-content" style="display: none;">
                        <img id="recipe-modal-image" class="img-fluid mb-3" alt="Meal image">
                        <h6>Instructions:</h6>
                        <p id="recipe-modal-instructions"></p>
                        <h6>Ingredients:</h6>
                        <ul id="recipe-modal-ingredients" class="list-group"></ul>
                    </div>
                    <div id="recipe-error" class="alert alert-warning" style="display: none;">
                        No recipe found for this meal. Please try another search term.
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Include the existing footer -->
    <%- include('partials/footer') %>

    <!-- Initialize Lucide icons -->
    <script>
        lucide.createIcons();

        document.getElementById('meal-date').addEventListener('change', loadMealPlan);

        async function loadMealPlan() {
            const date = document.getElementById('meal-date').value;
            if (!date) return;

            const response = await fetch(`/meal-planner/${date}`);
            const mealPlan = await response.json();

            document.getElementById('breakfast').value = mealPlan?.meals?.breakfast || '';
            document.getElementById('lunch').value = mealPlan?.meals?.lunch || '';
            document.getElementById('dinner').value = mealPlan?.meals?.dinner || '';
            document.getElementById('snacks').value = mealPlan?.meals?.snacks || '';

            updatePlannedMeals(mealPlan?.meals);
        }

        async function saveMealPlan() {
            const date = document.getElementById('meal-date').value;
            if (!date) return;

            const meals = {
                breakfast: document.getElementById('breakfast').value,
                lunch: document.getElementById('lunch').value,
                dinner: document.getElementById('dinner').value,
                snacks: document.getElementById('snacks').value
            };

            const response = await fetch(`/meal-planner/${date}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(meals)
            });

            const mealPlan = await response.json();
            updatePlannedMeals(mealPlan.meals);
        }

        function updatePlannedMeals(meals) {
            const plannedMeals = document.getElementById('planned-meals');
            plannedMeals.innerHTML = `
                <li class="list-group-item">Breakfast: <span class="meal-item" data-meal="${meals?.breakfast || ''}">${meals?.breakfast || ''}</span></li>
                <li class="list-group-item">Lunch: <span class="meal-item" data-meal="${meals?.lunch || ''}">${meals?.lunch || ''}</span></li>
                <li class="list-group-item">Dinner: <span class="meal-item" data-meal="${meals?.dinner || ''}">${meals?.dinner || ''}</span></li>
                <li class="list-group-item">Snacks: <span class="meal-item" data-meal="${meals?.snacks || ''}">${meals?.snacks || ''}</span></li>
            `;

            // Add click event listeners to meal items
            document.querySelectorAll('.meal-item').forEach(item => {
                if (item.textContent.trim()) {
                    item.classList.add('text-primary', 'cursor-pointer');
                    item.style.cursor = 'pointer';
                    item.addEventListener('click', showMealDetails);
                }
            });
        }

        async function showMealDetails(event) {
            const mealName = event.target.dataset.meal;
            if (!mealName) return;

            // Show modal with loading state
            $('#recipe-modal').modal('show');
            document.getElementById('recipe-modal-title').textContent = mealName;
            document.getElementById('recipe-loading').style.display = 'block';
            document.getElementById('recipe-content').style.display = 'none';
            document.getElementById('recipe-error').style.display = 'none';

            try {
                // Format the meal name for the API (lowercase and replace spaces with underscores)
                const formattedMealName = mealName.toLowerCase().replace(/\s+/g, '_');
                const response = await fetch(`https://www.themealdb.com/api/json/v1/1/search.php?s=${formattedMealName}`);
                const data = await response.json();

                if (data.meals && data.meals.length > 0) {
                    const meal = data.meals[0];
                    
                    // Update modal content
                    document.getElementById('recipe-modal-image').src = meal.strMealThumb;
                    document.getElementById('recipe-modal-instructions').textContent = meal.strInstructions;
                    
                    // Get ingredients
                    const ingredientsList = document.getElementById('recipe-modal-ingredients');
                    ingredientsList.innerHTML = '';
                    
                    // Loop through ingredients (API provides up to 20 ingredients)
                    for (let i = 1; i <= 20; i++) {
                        const ingredient = meal[`strIngredient${i}`];
                        const measure = meal[`strMeasure${i}`];
                        
                        if (ingredient && ingredient.trim() !== '') {
                            const li = document.createElement('li');
                            li.className = 'list-group-item';
                            li.textContent = `${measure} ${ingredient}`;
                            ingredientsList.appendChild(li);
                        }
                    }
                    
                    // Show content
                    document.getElementById('recipe-loading').style.display = 'none';
                    document.getElementById('recipe-content').style.display = 'block';
                } else {
                    // Show error message
                    document.getElementById('recipe-loading').style.display = 'none';
                    document.getElementById('recipe-error').style.display = 'block';
                }
            } catch (error) {
                console.error('Error fetching recipe:', error);
                document.getElementById('recipe-loading').style.display = 'none';
                document.getElementById('recipe-error').style.display = 'block';
            }
        }
    </script>

</body>
</html>