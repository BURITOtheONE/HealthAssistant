<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Health Assistant</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="css/style.css">
    <!-- Bootstrap JavaScript library for interactive elements -->
    <script src="js/bootstrap.bundle.js"></script>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <!-- Lucide icons for consistent iconography -->
    <script src="https://unpkg.com/lucide@latest"></script>
</head>

<body class="bg-body">

    <!-- Include the existing navbar -->
    <%- include('partials/navbar') %>

    <!-- Main Content -->
    <div id="meal-container" class="container"></div>

    <!-- Include the existing footer -->
    <%- include('partials/footer') %>

    <script>
        window.onload = loadMeals();

        async function loadMeals() {
            // Create a container for the rows
            const mealContainer = document.getElementById('meal-container');
            mealContainer.innerHTML = '';
            
            // Add modal container to the DOM for the popup
            if (!document.getElementById('recipe-modal')) {
                const modalHTML = `
                    <div class="modal fade" id="recipe-modal" tabindex="-1" role="dialog" aria-labelledby="recipeModalLabel" aria-hidden="true">
                        <div class="modal-dialog modal-lg" role="document">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="recipe-modal-title"></h5>
                                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                        <span aria-hidden="true">&times;</span>
                                    </button>
                                </div>
                                <div class="modal-body">
                                    <img id="recipe-modal-image" class="img-fluid mb-3" alt="Meal image">
                                    <div class="row">
                                        <div class="col-md-4">
                                            <h6>Ingredients:</h6>
                                            <ul id="recipe-modal-ingredients" class="list-group mb-3"></ul>
                                        </div>
                                        <div class="col-md-8">
                                            <h6>Instructions:</h6>
                                            <p id="recipe-modal-instructions"></p>
                                        </div>
                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                document.body.insertAdjacentHTML('beforeend', modalHTML);
            }
            
            // Generate 2 rows
            for (let row = 0; row < 2; row++) {
                const rowDiv = document.createElement('div');
                rowDiv.className = 'row';
                mealContainer.appendChild(rowDiv);
                
                // Generate 3 meals per row
                await generateRowOfMeals(rowDiv, 3);
            }
        }

        async function generateRowOfMeals(rowElement, count) {
            // Create and fetch multiple meals in parallel
            const mealPromises = [];
            for (let i = 0; i < count; i++) {
                mealPromises.push(fetchRandomMeal());
            }
            
            // Wait for all meals to be fetched
            const meals = await Promise.all(mealPromises);
            
            // Add each meal to the row
            meals.forEach(meal => {
                const colDiv = document.createElement('div');
                colDiv.className = 'col-sm-4';
                colDiv.innerHTML = `
                    <div class="card" style="margin: 1rem">
                        <img class="card-img-top p-3 rounded-5" src="${meal.strMealThumb}" alt="Card image cap"></img>
                        <div class="card-body">
                            <h5 class="card-title">${meal.strMeal}</h5>
                            <p class="card-text">${meal.strInstructions.substring(0, 150)}...</p>
                            <button class="btn btn-avocado-out view-recipe-btn" 
                                    data-id="${meal.idMeal}">
                                View Recipe
                            </button>
                        </div>
                    </div>
                `;
                rowElement.appendChild(colDiv);
                
                // Store the meal data in a global variable for easy access
                if (!window.mealData) {
                    window.mealData = {};
                }
                window.mealData[meal.idMeal] = meal;
            });
            
            // Add event listeners to all buttons after they're added to DOM
            document.querySelectorAll('.view-recipe-btn').forEach(button => {
                button.addEventListener('click', showRecipeModal);
            });
        }

        function showRecipeModal(event) {
            const button = event.currentTarget;
            const mealId = button.dataset.id;
            const meal = window.mealData[mealId];
            
            if (!meal) return;
            
            // Set modal content
            document.getElementById('recipe-modal-title').textContent = meal.strMeal;
            document.getElementById('recipe-modal-image').src = meal.strMealThumb;
            document.getElementById('recipe-modal-instructions').textContent = meal.strInstructions;
            
            // Process ingredients
            const ingredientsList = document.getElementById('recipe-modal-ingredients');
            ingredientsList.innerHTML = '';
            
            // Loop through ingredients (API provides up to 20 ingredients)
            for (let i = 1; i <= 20; i++) {
                const ingredient = meal[`strIngredient${i}`];
                const measure = meal[`strMeasure${i}`];
                
                if (ingredient && ingredient.trim() !== '') {
                    const li = document.createElement('li');
                    li.className = 'list-group-item';
                    li.textContent = `${measure} ${ingredient}`;
                    ingredientsList.appendChild(li);
                }
            }
            
            // Show modal
            $('#recipe-modal').modal('show');
        }

        async function fetchRandomMeal() {
            const response = await fetch('https://www.themealdb.com/api/json/v1/1/random.php');
            const data = await response.json();
            return data.meals[0];
        }
    </script>

    <!-- Initialize Lucide icons -->
    <script>
        lucide.createIcons();
    </script>

</body>
</html>